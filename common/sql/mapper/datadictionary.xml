<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="datadictionary">

    <!-- <cache eviction="FIFO" flushInterval="3600000" size="512" readOnly="true" /> -->

    <select id="getAllDictionaries" resultType="phalaenopsis.common.entity.DataDictionaryItem">
		select Id, Module,
		Type, Value, Text, Parent, Rank, Remarks, alias, moduleAlias, isSystem from ss_DataDictionary
		order
		by Module,Type,Rank
	</select>


    <select id="getAllRegions" resultType="phalaenopsis.common.entity.Region">
		select regionid ,
		regionname, parentid, regiontype, rank from ss_region
	</select>

    <select id="getRegions" resultType="phalaenopsis.common.entity.Region">
		select regionid, regionname,
		parentid, regiontype, rank from ss_region where rank = 1 or (rank = 2
		and (regiontype = 1 or regiontype = 2))
		order by case when rank = 1 then regionid 
		when rank = 2 then parentid else 0 end, rank, RegionID
	</select>

    <select id="getCityRegions" resultType="phalaenopsis.common.entity.Region">
		select regionid,
		regionname, parentid, regiontype, rank from ss_region where
		rank = 1
		order by regionId
	</select>

    <select id="getCountyRegionsByCity" parameterType="int"
            resultType="phalaenopsis.common.entity.Region">
		select regionid, regionname, parentid, regiontype, rank
		from ss_region where
		rank = 2 and parentid= #{cityCode} /*and (regionType
		= 2 or regionType =
		0)*/
	</select>

    <select id="getOrganRegion" parameterType="int"
            resultType="phalaenopsis.common.entity.Region">
		select regionid, regionname, parentid, regiontype, rank
		from ss_region where RegionID= #{regionId}
	</select>

    <select id="getRegionsByIDs" resultType="phalaenopsis.common.entity.Region">
        select regionid, regionname, parentid, regiontype, rank from ss_region
        where regionid in
        <foreach item="item" index="index" collection="array" open="("
                 separator="," close=")">
            #{item}
        </foreach>
    </select>


    <select id="getRegion4GML" parameterType="int"
            resultType="phalaenopsis.common.entity.Region4GML">
		select Id, Code, Name, GML, RANK, REGIONTYPE, PARENT_ID
		from region;

	</select>


    <select id="getRegionMap" parameterType="map"
            resultType="phalaenopsis.common.entity.Region4GML">
        select ID, CODE, NAME, GML, RANK, REGIONTYPE, PARENT_ID from Region
        <if test="OrgGrade ==3">
            where Rank = 2 and Code in
            <foreach item="item" index="index" collection="cityReg" open="("
                     separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="OrgGrade ==2">
            <if test="regiontype == '管理区'">
                where Rank = 3 and ( PARENT_ID = #{cityRegion} or Code =
                #{cityRegion}) and RegionType = 1
            </if>

            <if test="regiontype != '管理区'">
                where Rank = 3 and PARENT_ID = #{cityRegion} and
                RegionType = 0

            </if>
        </if>
        <if test="OrgGrade ==1">
            where Rank = 3 and (Code in
            <foreach item="item" index="index" collection="countyReg"
                     open="(" separator="," close=")">
                #{item}
            </foreach>
            or Name in
            <foreach item="item" index="index" collection="regName" open="("
                     separator="," close=")">
                #{item}
            </foreach>
            ) and RegionType = 1
        </if>

        order by Code
    </select>

    <insert id="saveDictionary" parameterType="DataDictionaryItem">
        <selectKey keyProperty="count" resultType="int" order="BEFORE">
            select count(1) from ss_datadictionary where id =#{id}
        </selectKey>
        <if test="count == 0">
            insert into ss_datadictionary
            (id,
            module,
            type,
            value,
            text,
            parent,
            rank,
            remarks,
            alias,
            modulealias,
            issystem)
            values
            (#{id, jdbcType=NUMERIC},
            #{module, jdbcType=VARCHAR},
            #{type, jdbcType=VARCHAR},
            #{value, jdbcType=VARCHAR},
            #{text, jdbcType=VARCHAR},
            #{parent, jdbcType=VARCHAR},
            #{rank, jdbcType=NUMERIC},
            #{remarks, jdbcType=VARCHAR},
            #{alias, jdbcType=VARCHAR},
            #{moduleAlias, jdbcType=VARCHAR},
            #{isSystem,javaType=boolean,jdbcType=NUMERIC})
        </if>
        <if test="count > 0">
            update ss_datadictionary
            set
            module      = #{module, jdbcType=VARCHAR},
            type        = #{type, jdbcType=VARCHAR},
            value       = #{value, jdbcType=VARCHAR},
            text        = #{text, jdbcType=VARCHAR},
            parent      = #{parent, jdbcType=VARCHAR},
            rank        = #{rank, jdbcType=NUMERIC},
            remarks     = #{remarks, jdbcType=VARCHAR},
            alias       = #{alias, jdbcType=VARCHAR},
            modulealias = #{moduleAlias, jdbcType=VARCHAR},
            issystem    = #{isSystem,javaType=boolean,jdbcType=NUMERIC}
            where id = #{id, jdbcType=NUMERIC}
        </if>
    </insert>


    <delete id="deleteDictionary" parameterType="Long">
        delete ss_datadictionary where id in
        <foreach collection="list" item="item" separator="," open="("
                 close=")">
            #{item}
        </foreach>
    </delete>

    <sql id="queryDataDictionary">
        <if test="text != null">
            and t.text like '%'||#{text}||'%'
        </if>
    </sql>

    <select id="listDataDictionary" parameterType="map" resultType="DataDictionaryItem">
        select * from ( select t.*, rownum num from ss_datadictionary t where 1= 1
        <include refid="queryDataDictionary"/>
        )
        where num between #{startNum} and #{endNum}
    </select>

    <select id="countDataDictionary" parameterType="map">
        select count(*) from sw_mapspot t where 1=1
        <include refid="queryDataDictionary"/>
    </select>

    <select id="getMaxIdPlus" resultType="int">
        select max(id)+1 from ss_datadictionary
    </select>

</mapper>