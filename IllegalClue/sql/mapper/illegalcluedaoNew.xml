<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper  
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="phalaenopsis.illegalclue.dao.IIllegalClueDaoNew">
	<select id="isExistClue" parameterType="string" resultType="int">
		select count(1) from CLUE where id = #{id}
	</select>

	<insert id="saveClue" parameterType="Clue">
		insert into CLUE(
		id,
		type,
		source,
		serial_number,
		happend_time,
		region_id,
		address,
		content,
		informer_name,
		informer_region_id,
		informer_address,
		informer_phone_number,
		defendant_name,
		defendant_type,
		defendant_organization_name,
		defendant_post,
		record_staff_id,
		record_organization_id,
		record_time,
		remarks,
		is_duplicated,
		is_removed,
		is_temporary,
		informer_post_code,
		certificate_number_nor,
		certificate_number_sp,
		email,
		main_leaders,
		sub_organization,
		main_media,
		other_way,
		fax_number,
		main_ministry,
		record_organization,
		record_staff,
		is_merge_handled,
		illegal_area,
		farmland_area,
		illegal_type,
		minerals,
		is_audit,
		is_transfer,
		is_supervise,
		basic_farmland_area,
		handle_type,
		proposed_opinion,
		is_real_name,
		certificate_type,
		certificate_number,
		informer_inform_time,
		informer_township,
		township,
		is_significant,
		judge_remark,
		notified_informer,
		operator_name,
		operate_date,
		dest_organization_id,
		wechat_inform_content,
		wechat_inform_time,
		INSTANCEID,
		node,
		REAL_NAME
		) values (
		#{id},
		#{type,jdbcType=INTEGER},
		#{source,jdbcType=VARCHAR},
		#{serialNumber,jdbcType=VARCHAR},
		#{happendTime,jdbcType=INTEGER},
		#{regionId,jdbcType=VARCHAR},
		#{address,jdbcType=VARCHAR},
		#{content,jdbcType=VARCHAR},
		#{informerName,jdbcType=VARCHAR},
		#{informerRegionId,jdbcType=VARCHAR},
		#{informerAddress,jdbcType=VARCHAR},
		#{informerPhoneNumber,jdbcType=VARCHAR},
		#{defendantName,jdbcType=VARCHAR},
		#{defendantType,jdbcType=INTEGER},
		#{defendantOrganizationName,jdbcType=VARCHAR},
		#{defendantPost,jdbcType=VARCHAR},
		#{recordStaffId,jdbcType=VARCHAR},
		#{recordOrganizationId,jdbcType=VARCHAR},
		#{recordTime,jdbcType=INTEGER},
		#{remarks,jdbcType=VARCHAR},
		#{isDuplicated,jdbcType=INTEGER},
		#{isRemoved,jdbcType=INTEGER},
		#{isTemporary,jdbcType=INTEGER},
		#{informerPostCode,jdbcType=VARCHAR},
		#{certificateNumberNor,jdbcType=VARCHAR},
		#{certificateNumberSp,jdbcType=VARCHAR},
		#{email,jdbcType=VARCHAR},
		#{mainLeaders,jdbcType=VARCHAR},
		#{subOrganization,jdbcType=VARCHAR},
		#{mainMedia,jdbcType=VARCHAR},
		#{otherWay,jdbcType=VARCHAR},
		#{faxNumber,jdbcType=VARCHAR},
		#{mainMinistry,jdbcType=VARCHAR},
		#{recordOrganization,jdbcType=VARCHAR},
		#{recordStaff,jdbcType=VARCHAR},
		#{isMergeHandled,jdbcType=INTEGER},
		#{illegalArea,jdbcType=VARCHAR},
		#{farmlandArea,jdbcType=VARCHAR},
		#{illegalType,jdbcType=VARCHAR},
		#{minerals,jdbcType=INTEGER},
		#{isAudit,jdbcType=INTEGER},
		#{isTransfer,jdbcType=INTEGER},
		#{isSupervise,jdbcType=INTEGER},
		#{basicFarmlandArea,jdbcType=VARCHAR},
		#{handleType,jdbcType=INTEGER},
		#{proposedOpinion,jdbcType=VARCHAR},
		#{isRealName,jdbcType=INTEGER},
		#{certificateType,jdbcType=INTEGER},
		#{certificateNumber,jdbcType=VARCHAR},
		#{informerInformTime,jdbcType=INTEGER},
		#{informerTownship,jdbcType=VARCHAR},
		#{township,jdbcType=VARCHAR},
		#{isSignificant,jdbcType=INTEGER},
		#{judgeRemark,jdbcType=VARCHAR},
		#{notifiedInformer,jdbcType=VARCHAR},
		#{operatorName,jdbcType=VARCHAR},
		#{operate_date,jdbcType=INTEGER},
		#{dest_organization_id,jdbcType=VARCHAR},
		#{wechat_inform_content,jdbcType=VARCHAR},
		#{wechat_inform_time,jdbcType=INTEGER},
		#{instanceID,jdbcType=VARCHAR},
		#{node,jdbcType=VARCHAR},
		#{realName,jdbcType=INTEGER}
		)
	</insert>

	<update id="updateClue" parameterType="Clue">
		update CLUE set
		type = #{type,jdbcType=INTEGER},
		source = #{source,jdbcType=VARCHAR},
		serial_number = #{serialNumber,jdbcType=VARCHAR},
		happend_time = #{happendTime,jdbcType=INTEGER},
		region_id = #{regionId,jdbcType=VARCHAR},
		address = #{address,jdbcType=VARCHAR},
		content = #{content,jdbcType=VARCHAR},
		informer_name = #{informerName,jdbcType=VARCHAR},
		informer_region_id = #{informerRegionId,jdbcType=VARCHAR},
		informer_address = #{informerAddress,jdbcType=VARCHAR},
		informer_phone_number = #{informerPhoneNumber,jdbcType=VARCHAR},
		defendant_name = #{defendantName,jdbcType=VARCHAR},
		defendant_type = #{defendantType,jdbcType=INTEGER},
		defendant_organization_name = #{defendantOrganizationName,jdbcType=VARCHAR},
		defendant_post = #{defendantPost,jdbcType=VARCHAR},
		record_staff_id = #{recordStaffId,jdbcType=VARCHAR},
		record_organization_id = #{recordOrganizationId,jdbcType=VARCHAR},
		record_time = #{recordTime,jdbcType=INTEGER},
		remarks = #{remarks,jdbcType=VARCHAR},
		is_duplicated = #{isDuplicated,jdbcType=INTEGER},
		is_removed = #{isRemoved,jdbcType=INTEGER},
		is_temporary = #{isTemporary,jdbcType=INTEGER},
		informer_post_code = #{informerPostCode,jdbcType=VARCHAR},
		certificate_number_nor = #{certificateNumberNor,jdbcType=VARCHAR},
		certificate_number_sp = #{certificateNumberSp,jdbcType=VARCHAR},
		email = #{email,jdbcType=VARCHAR},
		main_leaders = #{mainLeaders,jdbcType=VARCHAR},
		sub_organization = #{subOrganization,jdbcType=VARCHAR},
		main_media = #{mainMedia,jdbcType=VARCHAR},
		other_way = #{otherWay,jdbcType=VARCHAR},
		fax_number = #{faxNumber,jdbcType=VARCHAR},
		main_ministry = #{mainMinistry,jdbcType=VARCHAR},
		record_organization = #{recordOrganization,jdbcType=VARCHAR},
		record_staff = #{recordStaff,jdbcType=VARCHAR},
		is_merge_handled = #{isMergeHandled,jdbcType=INTEGER},
		illegal_area = #{illegalArea,jdbcType=VARCHAR},
		farmland_area = #{farmlandArea,jdbcType=VARCHAR},
		illegal_type = #{illegalType,jdbcType=VARCHAR},
		minerals = #{minerals,jdbcType=INTEGER},
		is_audit = #{isAudit,jdbcType=INTEGER},
		is_transfer = #{isTransfer,jdbcType=INTEGER},
		is_supervise = #{isSupervise,jdbcType=INTEGER},
		basic_farmland_area = #{basicFarmlandArea,jdbcType=VARCHAR},
		handle_type = #{handleType,jdbcType=INTEGER},
		proposed_opinion = #{proposedOpinion,jdbcType=VARCHAR},
		is_real_name = #{isRealName,jdbcType=INTEGER},
		certificate_type = #{certificateType,jdbcType=INTEGER},
		certificate_number = #{certificateNumber,jdbcType=VARCHAR},
		informer_inform_time = #{informerInformTime,jdbcType=INTEGER},
		informer_township = #{informerTownship,jdbcType=VARCHAR},
		township = #{township,jdbcType=VARCHAR},
		is_significant = #{isSignificant,jdbcType=INTEGER},
		judge_remark = #{judgeRemark,jdbcType=VARCHAR},
		notified_informer = #{notifiedInformer,jdbcType=VARCHAR},
		operator_name = #{operatorName,jdbcType=VARCHAR},
		operate_date = #{operate_date,jdbcType=INTEGER},
		dest_organization_id = #{dest_organization_id,jdbcType=VARCHAR},
		wechat_inform_content = #{wechat_inform_content,jdbcType=VARCHAR},
		wechat_inform_time = #{wechat_inform_time,jdbcType=INTEGER},
		REAL_NAME = #{realName,jdbcType=INTEGER}
		where id = #{id}
	</update>


	<select id="getClue" parameterType="string" resultType="Clue">
		select distinct
		cl.*,
		re.parentid city,
		reg.parentid informerCity,
		sou.parentcode sourcePcode,
		ille.parentcode illegalTypePcode from CLUE cl
		left join ss_region re on
		re.regionid=cl.region_id
		left join ss_region reg on
		reg.regionid=cl.informer_region_id
		left join CLUE_SOURCE_TYPE sou on
		sou.code=cl.source
		left join Clue_Illegal_Type ille on
		ille.code=cl.illegal_type where id = #{id}
	</select>

	<resultMap type="ClueDictionary" id="clueDictionaryMap">
		<result property="id" column="id" />
		<result property="name" column="name" />
		<result property="pId" column="pid" />
		<result property="type" column="type" />
		<collection property="childDictionaries" ofType="ClueDictionary">
			<id property="id" column="cid" />
			<result property="name" column="cName" />
			<result property="pId" column="cpId" />
		</collection>
	</resultMap>

	<!-- 获取违法类型字典 -->
	<select id="getClueDictionaries" resultMap="clueDictionaryMap">
		select * from
		VIEW_ILLEGALCLUE_DICTIONARY
	</select>


	<!-- 查询转交办集合 -->
	<select id="getHandleOrganizationList" parameterType="string"
		resultType="Condition">

    select t.id as Key ,t.name as Value,
		(select s.regionid from
		SYS_ORGREGIONS s where s.organizationid=t.id and
		rownum =1) regionid
		from SYS_ORGANIZATION t where
		t.parentid=(select case type when 1 then id when 2 then parentid end
     from SYS_ORGANIZATION  where id =#{id}) and t.type=1 order by
		regionid
	</select>
	<!-- 根据clueID查询审核信息 -->
	<select id="getClueAuditByClueID" parameterType="string"
		resultType="ClueAudit">
		select c.id id,
		c.audit_Time auditorTime,<!-- 审核时间 -->
		c.auditor auditor,<!-- 审核人 -->
		c.status status,<!-- 初判审核意见 -->
		c.audit_opinion auditOpinion<!-- 审核要求 -->
		from CLUE_AUDIT_RECORD c where c.clue_ID=#{id}
	</select>
	<!-- 查询审核列表 -->
	<select id="getClueAuditListByClueID" parameterType="List"
		resultType="ClueAudit">
		select c.id id,
		c.audit_Time auditorTime,<!-- 审核时间 -->
		c.auditor auditor,<!-- 审核人 -->
		c.status status,<!-- 初判审核意见 -->
		c.audit_opinion auditOpinion,
		c.audittype auditType <!-- 审核要求 -->
		from CLUE_AUDIT_RECORD c where c.clue_ID=#{id} order by c.audit_Time
		asc
	</select>
	<select id="getClueEndByClueID" parameterType="string"
		resultType="ClueEnd">
		select
		c.id id,
		c.operate_time operatorTime,
		c.operator operator,
		c.responseopinion as responseopinion,
		c.handleType handleType,
		c.endcase endcase,
		c.remark remark
		<!-- c.auditOpinion auditOpinion, c.auditor as auditor, c.auditorTime auditorTime, 
			c.status status -->
		from clue_closed_info c
		where c.clue_ID=#{id}
	</select>
	<!-- 保存结办信息 -->
	<insert id="saveClueEnd" parameterType="ClueEnd">
		insert into clue_closed_info (
		id,
		CLUE_ID,
		OPERATOR,
		OPERATE_TIME,
		OPERATE_ORGANIZATION_ID,
		STATUS,
		IS_AUDIT,
		<!-- HANDLE_ID, SRC_ORG_ID, DEST_ORG_ID, HANDLE_DEPARTMENT, RECOMMENDED_DATE, 
			REASON, -->
		ENDCASE,
		IS_NOTIFY,
		RESPONSEOPINION,
		HANDLETYPE,
		REMARK,
		AUDITOPINION)
		values(
		#{id},
		#{clueId,jdbcType=VARCHAR},
		#{register,jdbcType=VARCHAR},
		#{registeTime,jdbcType=INTEGER},
		#{operate_organizattion_Id,jdbcType=VARCHAR},
		#{status,jdbcType=INTEGER},
		#{is_Audit,jdbcType=INTEGER},
		<!-- #{HANDLE_ID,jdbcType=VARCHAR}, #{SRC_ORG_ID,jdbcType=VARCHAR}, #{DEST_ORG_ID,jdbcType=VARCHAR}, 
			#{HANDLE_DEPARTMENT,jdbcType=VARCHAR}, #{RECOMMENDED_DATE,jdbcType=INTEGER}, 
			#{REASON,jdbcType=VARCHAR}, -->
		#{endcase,jdbcType=INTEGER},
		#{is_Notify,jdbcType=INTEGER},
		#{responseOpinion,jdbcType=INTEGER},
		#{handleType,jdbcType=INTEGER},
		#{remark,jdbcType=VARCHAR},
		#{auditOpinion,jdbcType=VARCHAR})
	</insert>
	<!-- 修改结办信息 -->
	<insert id="updateClueEnd" parameterType="ClueEnd">
		update clue_closed_info set
		OPERATOR=#{register,jdbcType=VARCHAR},
		OPERATE_TIME=#{registeTime,jdbcType=INTEGER},
		OPERATE_ORGANIZATION_ID=#{operate_organizattion_Id,jdbcType=VARCHAR},
		STATUS=#{status,jdbcType=INTEGER},
		<!-- IS_AUDIT=#{is_Audit,jdbcType=INTEGER}, -->
		<!-- HANDLE_ID=#{HANDLE_ID,jdbcType=VARCHAR}, SRC_ORG_ID=#{SRC_ORG_ID,jdbcType=VARCHAR}, 
			DEST_ORG_ID=#{DEST_ORG_ID,jdbcType=VARCHAR}, HANDLE_DEPARTMENT=#{ HANDLE_DEPARTMENT,jdbcType=VARCHAR}, 
			RECOMMENDED_DATE=#{recommended_date,jdbcType=INTEGER}, REASON=#{reason,jdbcType=VARCHAR}, -->
		<!-- TYPE=#{type,jdbcType=INTEGER}, -->
		IS_NOTIFY=#{is_Notify,jdbcType=INTEGER},
		RESPONSEOPINION=#{responseOpinion,jdbcType=INTEGER},
		HANDLETYPE=#{handleType,jdbcType=INTEGER},
		REMARK=#{remark,jdbcType=VARCHAR}
		<!-- AUDITOPINION=#{auditOpinion,jdbcType=VARCHAR}, AUDITOR=#{auditor,jdbcType=VARCHAR}, 
			AUDITORTIME=#{auditorTime,jdbcType=VARCHAR} -->
		where id=#{id}
	</insert>
	<!-- 保存违法线索审核 -->
	<insert id="saveClueAudit" parameterType="ClueAudit">
		insert into CLUE_AUDIT_RECORD(
		id,
		CLUE_ID,
		TYPE,
		HANDLE_SUGGESTION,
		REVIEW_OPINION,
		REVIEWER,
		REVIEW_TIME,
		AUDIT_OPINION,
		AUDITOR,
		AUDIT_TIME,
		ASSIGN_ID,
		PROCESS_ID,
		REPORT_ID,
		OPERATOR,
		OPERATE_TIME,
		STATUS,
		TRANSFER_ID,
		RETURN_REASON,
		AUDITTYPE
		)
		values (
		#{id},
		#{clueId,jdbcType=VARCHAR},
		#{type,jdbcType=INTEGER},
		#{handleSuggestion,jdbcType=VARCHAR},
		#{reviewOpinion,jdbcType=VARCHAR},
		#{reviewer,jdbcType=VARCHAR},
		#{reviewTime,jdbcType=INTEGER},
		#{auditOpinion,jdbcType=VARCHAR},
		#{auditor,jdbcType=VARCHAR},
		#{auditorTime,jdbcType=INTEGER},
		#{assignId,jdbcType=VARCHAR},
		#{processId,jdbcType=VARCHAR},
		#{reportId,jdbcType=VARCHAR},
		#{operator,jdbcType=VARCHAR},
		#{operatorTime,jdbcType=INTEGER},
		#{status,jdbcType=INTEGER},
		#{transferId,jdbcType=VARCHAR},
		#{returnReason,jdbcType=VARCHAR},
		#{auditType,jdbcType=INTEGER}
		)

	</insert>

	<!-- 修改违法线索审核 -->
	<update id="updateClueAudit" parameterType="ClueAudit">
		update CLUE_AUDIT_RECORD set
		CLUE_ID=#{clueId,jdbcType=VARCHAR},
		TYPE=#{type,jdbcType=INTEGER},
		HANDLE_SUGGESTION=#{handleSuggestion,jdbcType=VARCHAR},
		REVIEW_OPINION=#{reviewOpinion,jdbcType=VARCHAR},
		REVIEWER=#{reviewer,jdbcType=VARCHAR},
		REVIEW_TIME=#{reviewTime,jdbcType=INTEGER},
		AUDIT_OPINION=#{auditOpinion,jdbcType=VARCHAR},
		AUDITOR=#{auditor,jdbcType=VARCHAR},
		AUDIT_TIME=#{auditorTime,jdbcType=INTEGER},
		ASSIGN_ID=#{assignId,jdbcType=VARCHAR},
		PROCESS_ID=#{processId,jdbcType=VARCHAR},
		REPORT_ID=#{reportId,jdbcType=VARCHAR},
		<!-- OPERATOR=#{operator,jdbcType=VARCHAR}, OPERATE_TIME=#{operatorTime,jdbcType=INTEGER}, -->
		STATUS=#{status,jdbcType=INTEGER},
		TRANSFER_ID=#{transferId,jdbcType=VARCHAR},
		RETURN_REASON=#{returnReason,jdbcType=VARCHAR}
		where id = #{id}
	</update>


	<sql id="queryClue">
		<if test="serialNumber != null and serialNumber != ''">
			and t.SERIAL_NUMBER like
			concat(concat('%',#{serialNumber}),'%')
		</if>
		<if test="content != null and content != ''">
			and t.CONTENT like concat(concat('%',#{content}),'%')
		</if>
		<if test="defendantName !=null and defendantName !=''">
			and t.DEFENDANT_NAME like
			concat(concat('%',#{defendantName}),'%')
		</if>
		<if test="source !=null and source !=''">
			and t.SOURCE in (select code from CLUE_SOURCE_TYPE
			start with code =#{source}
			connect by prior CODE = PARENTCODE
			)
		</if>
		<if test="startTime !=null and startTime !=''">
			and t.HAPPEND_TIME <![CDATA[>=]]>
			#{startTime}
		</if>
		<if test="endTime!=null and endTime !=''">
			and t.HAPPEND_TIME <![CDATA[<=]]>
			#{endTime}
		</if>
		<!--20170703添加 线索状态查询条件 -->
		<if test="trialState!=null and trialState !='' and trialState==0">
			and (t.NODE =#{RegistNode} or t.NODE = #{EndNode})
		</if>
		<if test="trialState!=null and trialState !='' and trialState==1">
			and (t.NODE =#{JudgeAuditNode} or t.NODE =
			#{EndAuditNode})
		</if>
		<if test="trialState!=null and trialState !='' and trialState==2">
			and (t.NODE =#{UnHandleNode} or t.NODE = #{SubHandleNode}
			or t.NODE = #{FinishNode})
		</if>
		<!-- -->
		<if test="illegalType!=null and illegalType !=''">
			and t.ILLEGAL_TYPE in(select code from CLUE_ILLEGAL_TYPE
			start with code =#{illegalType}
			connect by prior code = parentcode)
		</if>
		<if test="illegalArea!=null and illegalArea!=''">
			and t.ILLEGAL_AREA <![CDATA[>=]]>
			#{illegalArea}
		</if>
		<if test="minerals!=null and minerals!=''">
			and t.MINERALS = #{minerals}
		</if>
		<if test="regionId!=null and regionId!='' and regionId!=0">
			and t.REGION_ID = #{regionId}
		</if>
		<if test="problemCity!=null and problemCity!='' and problemCity!=0">
			and t.REGION_ID in ( select regionid from ss_region
			where parentid =#{problemCity})
		</if>
		<if test="address!=null and address!=''">
			and t.ADDRESS like
			concat(concat('%',#{address}),'%')
		</if>
		<if test="node != null and node !=''">
			and t.node = #{node}
		</if>
		<if test="buildCaseType !=null and buildCaseType !=''">
			and t.id in (select ci.clue_id from clue_closed_info ci
			where ci.handletype = 20010)
		</if>
	</sql>


	<!-- 查询列表的总数 -->
	<select id="getClueCount" resultType="int">
		select count(1) from CLUE t where 1=1
		<include refid="queryClue"></include>
	</select>
	<!-- 饼图查询 -->
	<select id="getClueList" resultType="Clue">
		select distinct t.* from clue t
		left join clue_illegal_type it on
		t.illegal_type=it.code
		where it.parentcode is not null
		<if test="startTime !=null and startTime !=''">
			and t.HAPPEND_TIME <![CDATA[>=]]>
			#{startTime}
		</if>
		<if test="endTime!=null and endTime !=''">
			and t.HAPPEND_TIME <![CDATA[<=]]>
			#{endTime}
		</if>
		<if test="illegalTypePcode!=null and illegalTypePcode !=''">
			and it.parentcode=#{illegalTypePcode}
		</if>
	</select>
	<!-- 查询列表数据 -->
	<select id="getClues" resultType="Clue">
		select z.* from(select rownum ro,s.* from (select
		t.*,
		<!-- re.regionname regionIdName, -->
		sou.name sourceName
		<!-- 这里走缓存或者去后台查 不做关联查询 -->
		from CLUE t
		<!-- left join ss_region re on re.regionid=t.region_id -->
		left join CLUE_SOURCE_TYPE sou on sou.code=t.source
		where 1=1
		<include refid="queryClue"></include>
		)s) z where z.ro between #{startNum} and #{endNum} order by
		z.happend_time desc
	</select>
	<!--初判部分 -->
	<!--初判类型getClueType -->
	<select id="getClueType" parameterType="String" resultType="int">
		select cl.TYPE from CLUE cl where cl.id = #{id}
	</select>
	<!--初判属于范围内 getClueJudgeFromShuYu -->
	<select id="getClueJudgeFromShuYu" parameterType="String"
		resultType="ClueJudge">
		select cl.*,cl.PROPOSED_OPINION
		handleOpinion,cl.IS_SIGNIFICANT majorClue,cj.REMARKS
		handleRemark,cj.clue_id clueId,cj.RECOMMENDED_APPROACH_TYPE
		handleType,cj.NOTIFIED_INFORMER intendContent,cj.CLUE_TYPE
		judgeType,cj.OPERATOR_NAME judger,cj.OPERATE_DATE
		judgeTime,cl.dest_organization_id unit from CLUE cl
		left join
		CLUE_ILLEGAL cj on cj.clue_id=cl.id where cl.id = #{id}
	</select>

	<!--初判不属于范围内 getClueJudgeFromNotShuYu -->
	<select id="getClueJudgeFromNotShuYu" parameterType="String"
		resultType="ClueJudge">
		select cl.*,cl.PROPOSED_OPINION
		handleOpinion,cl.IS_SIGNIFICANT majorClue,ci.REMARKS
		handleRemark,ci.clue_id clueId,ci.NOTIFIED_INFORMER
		intendContent,ci.INVALID_TYPE unHandleType,cl.TYPE
		judgeType,ci.OPERATOR_NAME judger,ci.OPERATE_DATE judgeTime from CLUE
		cl
		left join CLUE_invalid ci on ci.clue_id=cl.id where cl.id = #{id}
	</select>
	<!-- -->
	<!--updateclue_invalid -->
	<update id="updateclue_invalid" parameterType="ClueJudge">
		update CLUE_invalid set
		INVALID_TYPE=#{unHandleType,jdbcType=VARCHAR},REMARKS=#{handleRemark,jdbcType=VARCHAR},NOTIFIED_INFORMER=#{intendContent,jdbcType=VARCHAR},OPERATOR_NAME=#{judger,jdbcType=VARCHAR},OPERATE_DATE=#{judgeTime,jdbcType=NUMERIC}
		where clue_id=#{clueId}
	</update>



	<!--updateclue_illegal -->
	<update id="updateclue_illegal" parameterType="ClueJudge">
		update CLUE_illegal set
		CLUE_TYPE=#{judgeType,jdbcType=NUMERIC},RECOMMENDED_APPROACH_TYPE=#{handleType,jdbcType=NUMERIC},REMARKS=#{handleRemark,jdbcType=VARCHAR},NOTIFIED_INFORMER=#{intendContent,jdbcType=VARCHAR},OPERATOR_NAME=
		#{judger,jdbcType=VARCHAR},OPERATE_DATE=#{judgeTime,jdbcType=NUMERIC}
		where clue_id=#{clueId}
	</update>



	<!--insertclue_invalid -->
	<insert id="insertclue_invalid" parameterType="ClueJudge">
		insert into
		CLUE_invalid(ID,CLUE_ID,INVALID_TYPE,REMARKS,NOTIFIED_INFORMER,OPERATOR_NAME,OPERATE_DATE)values(
		#{id,jdbcType=VARCHAR},#{clueId,jdbcType=VARCHAR},
		#{unHandleType,jdbcType=VARCHAR},#{handleRemark,jdbcType=VARCHAR},
		#{intendContent,jdbcType=VARCHAR},#{judger,jdbcType=VARCHAR},
		#{judgeTime,jdbcType=NUMERIC})
	</insert>


	<!--updateclue -->
	<update id="updateclue" parameterType="ClueJudge">
		update CLUE set
		TYPE=#{judgeType,jdbcType=NUMERIC},JUDGE_REMARK=#{handleRemark,jdbcType=VARCHAR},NOTIFIED_INFORMER=#{intendContent,jdbcType=VARCHAR},OPERATOR_NAME=#{judger,jdbcType=VARCHAR},OPERATE_DATE=#{judgeTime,jdbcType=NUMERIC},DEST_ORGANIZATION_ID=#{unit,jdbcType=VARCHAR}
		where id=#{clueId}
	</update>
	<!--insertclue -->
	<insert id="insertclue" parameterType="ClueJudge">
		insert into CLUE(ID,PROPOSED_OPINION,IS_SIGNIFICANT)values(
		#{clueId,jdbcType=VARCHAR},
		#{handleOpinion,jdbcType=VARCHAR},#{majorClue,jdbcType=NUMERIC})
	</insert>
	<!-- insertclue_illegal -->
	<insert id="insertclue_illegal" parameterType="ClueJudge">
		insert into
		CLUE_illegal(ID,CLUE_ID,CLUE_TYPE,RECOMMENDED_APPROACH_TYPE,REMARKS,NOTIFIED_INFORMER,OPERATOR_NAME,OPERATE_DATE,IS_SIGNIFICANT,IS_AUDIT)values(
		#{id,jdbcType=VARCHAR},
		#{clueId,jdbcType=VARCHAR},
		#{judgeType,jdbcType=NUMERIC},
		#{handleType,jdbcType=NUMERIC},
		#{handleRemark,jdbcType=VARCHAR},
		#{intendContent,jdbcType=VARCHAR},
		#{judger,jdbcType=VARCHAR},
		#{judgeTime,jdbcType=NUMERIC},
		#{majorClue,jdbcType=NUMERIC},
		#{majorClue,jdbcType=NUMERIC})
	</insert>

	<!--先查询是否有属于受理范围内的线索初判信息 -->
	<select id="isExistInnerClueJudge" parameterType="String"
		resultType="int">
		select count(1) from CLUE_illegal where clue_id = #{clueId}
	</select>
	<!--查询是否有不属于受理范围内的线索初判信息 -->
	<select id="isExistOuterClueJudge" parameterType="String"
		resultType="int">
		select count(1) from CLUE_invalid where clue_id = #{clueId}
	</select>


	<!-- 违法线索统计 -->
	<select id="getIllegalClueStatistic" parameterType="IllegalClueStatistic"
		resultType="IllegalClueStatistic">
		select
		(t1.reportLandNum+t1.reportMineralNum+t1.otherNum+t2.invalidClueNum)as
		totalAcceptClueNum ,
		(t1.reportLandNum+t1.reportMineralNum+t1.otherNum) as
		illegalClueNum,t1.*,t2.*
		from
		(select
		(count(case when c2.illegal_type like '01030%' then 1 else null end )+
		count(case when c2.illegal_type like '01040%' then 1 else null end )+
		count(case when c2.illegal_type like '01020%' then 1 else null end )+
		count(case when c2.illegal_type like '01010%' then 1 else null end ))
		as reportLandNum,
		count(case when c2.illegal_type like '01030%' then 1 else null end ) as
		illegalTransferNum,
		count(case when c2.illegal_type like '01040%' then 1 else null end ) as
		destructionFarmlandNum,
		count(case when c2.illegal_type like '01020%' then 1 else null end ) as
		illegalCoversLandNum,
		count(case when c2.illegal_type like '01010%' then 1 else null end ) as
		illegalLandNum,
		(count(case when c2.illegal_type like '02010%' then 1 else null end )+
		count(case when c2.illegal_type like '02020%' then 1 else null end )+
		count(case when c2.illegal_type like '02030%' then 1 else null end )+
		count(case when c2.illegal_type like '02040%' then 1 else null end ))
		as reportMineralNum,
		count(case when c2.illegal_type like '02010%' then 1 else null end ) as
		illegalExplorationMineralsNum,
		count(case when c2.illegal_type like '02020%' then 1 else null end ) as
		illegalminingMineralNum,
		count(case when c2.illegal_type like '02030%' then 1 else null end ) as
		illegalTransferMiningNum,
		count(case when c2.illegal_type like '02040%' then 1 else null end ) as
		illegalApprovalNum,
		(count(case when c2.illegal_type like '03010%' then 1 else null end )+
		count(case when c2.illegal_type like '03020%' then 1 else null end )+
		count(case when c2.illegal_type like '03030%' then 1 else null end )+
		count(case when c2.illegal_type like '03040%' then 1 else null end )+
		count(case when c2.illegal_type like '03050%' then 1 else null end )+
		count(case when c2.illegal_type like '03060%' then 1 else null end )+
		count(case when c2.illegal_type like '03070%' then 1 else null end )+
		count(case when c2.illegal_type like '03080%' then 1 else null end )+
		count(case when c2.illegal_type like '03090%' then 1 else null end )+
		count(case when c2.illegal_type like '03100%' then 1 else null end ))
		as otherNum,
		count(case when c2.illegal_type like '03010%' then 1 else null end ) as
		cluesQueryNum,
		count(case when c2.illegal_type like '03020%' then 1 else null end ) as
		landTransferNum,
		count(case when c2.illegal_type like '03030%' then 1 else null end ) as
		landIdleNum,
		count(case when c2.illegal_type like '03040%' then 1 else null end ) as
		realEstateEegistraterNum,
		count(case when c2.illegal_type like '03050%' then 1 else null end ) as
		landOwnershipNum,
		count(case when c2.illegal_type like '03060%' then 1 else null end ) as
		landDisputesNum,
		count(case when c2.illegal_type like '03070%' then 1 else null end ) as
		miningDisputesNum,
		count(case when c2.illegal_type like '03080%' then 1 else null end ) as
		wadeVisitNum,
		count(case when c2.illegal_type like '03090%' then 1 else null end ) as
		infoGovernmentAffairsNum,
		count(case when c2.illegal_type like '03100%' then 1 else null end ) as
		otherDepartbusinessNum,

		370000 as province from CLUE c1,CL_CLUE_ILLEGAL c2 where c1.id=c2.clue_id
		and c1.type=3 and c1.region_id in(select t3.id from region t1,region
		t2,region t3
		where t1.code='370000' and t1.code=t2.parent_id and t2.code=t3.parent_id)
		<if test="startTime !=null  and  startTime !=''">
			and c1.RECORD_TIME <![CDATA[>=]]>#{startTime}
		</if>
		<if test="endTime !=null  and  endTime !=''">
			and c1.RECORD_TIME <![CDATA[<=]]>#{endTime}
		</if>
		)t1
		inner join
		(select (
		count(case when c2.INVALID_TYPE like '010%' then 1 else null end )+
		count(case when c2.INVALID_TYPE like '040%' then 1 else null end )+
		count(case when c2.INVALID_TYPE like '040%' then 1 else null end ))
		as invalidClueNum,
		count(case when c2.INVALID_TYPE like '010%' then 1 else null end ) as
		queryResultNum,
		count(case when c2.INVALID_TYPE like '040%' then 1 else null end ) as
		consultNotToAcceptNum,
		count(case when c2.INVALID_TYPE like '040%' then 1 else null end ) as
		otherInvalidClueNum,
		370000 as province from CLUE c1,CL_CLUE_INVALID c2 where c1.id=c2.clue_id
		and c1.type=2 and c2.INVALID_TYPE like '010%' and c1.region_id
		in(select t3.id from region t1,region t2,region t3
		where t1.code='370000' and t1.code=t2.parent_id and t2.code=t3.parent_id)
		<if test="startTime !=null  and  startTime !=''">
			and c1.RECORD_TIME <![CDATA[>=]]>#{startTime}
		</if>
		<if test="endTime !=null  and  endTime !=''">
			and c1.RECORD_TIME <![CDATA[<=]]>#{endTime}
		</if>
		) t2
		on t1.province=t2.province
	</select>

	<!-- 更新当前的node值 -->
	<update id="updateCurrentNode">
		update clue t set t.node = #{node} where t.instanceId = #{instanceId}
	</update>

	<!-- 根据前缀获取最大的举报编号 -->
	<select id="getNum" resultType="string" parameterType="string">
		select
		max(t.serial_number) from CLUE t where t.serial_number like
		CONCAT(#{prefixNum},'%')
	</select>

	<!-- 删除功能 -->
	<delete id="deleteClue" parameterType="string">
		delete from CLUE t where
		t.id = #{id}
	</delete>

	<delete id="deleteClueAudit" parameterType="string">
		delete from
		clue_audit_record t where t.clue_id = #{id}
	</delete>

	<delete id="deleteClueClose" parameterType="string">
		delete from
		clue_closed_info t where t.clue_id = #{id}
	</delete>

	<delete id="deleteClueIllegal"  parameterType="string">
		delete from
		clue_illegal t where t.clue_id = #{id}
	</delete>
	
	<delete id="deleteClueInvalid"  parameterType="string">
		delete from
		clue_invalid t where t.clue_id = #{id}
	</delete>

</mapper>